package campid

import (
	"crypto/hmac"
	"crypto/sha512"
	"encoding/hex"

	"github.com/influx6/npkg/nerror"
	"github.com/influx6/npkg/nunsafe"
)

type CSRFManager struct {
	Secret string
}

func NewCSRFManager(secret string) *CSRFManager {
	var cm CSRFManager
	cm.Secret = secret
	return &cm
}

func (c CSRFManager) Validate(csrfMessage string, tokenNeedingValidation string) error {
	var hasher = hmac.New(sha512.New, nunsafe.String2Bytes(c.Secret))
	var _, err = hasher.Write(nunsafe.String2Bytes(csrfMessage))
	if err != nil {
		return nerror.WrapOnly(err)
	}
	var generatedToken = hex.EncodeToString(hasher.Sum(nil))
	if generatedToken != tokenNeedingValidation {
		return nerror.New("token is not valid, was not generated by us").Add("token", tokenNeedingValidation)
	}
	return nil
}

func (c CSRFManager) Create(csrfMessage string) (string, error) {
	var hasher = hmac.New(sha512.New, nunsafe.String2Bytes(c.Secret))
	var _, err = hasher.Write(nunsafe.String2Bytes(csrfMessage))
	if err != nil {
		return "", nerror.WrapOnly(err)
	}
	return hex.EncodeToString(hasher.Sum(nil)), nil
}
